apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.service.name }} 
  labels:
    chart: "{{ .Chart.Name | trunc 63 }}"
    chartVersion: "{{ .Chart.Version | trunc 63 }}" 
    visualize: "true" 
    app: {{ .Values.service.name }} 
spec:
  replicas: {{ .Values.replicaCount }} 
  selector: 
    matchLabels:
      app: {{ .Values.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}
        visualize: "true" 
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Values.service.name }}
            topologyKey: "kubernetes.io/hostname"
      containers: 
      - name: {{ .Values.service.name }} 
        image: "{{ .Values.image.repository }}:{{ .Chart.Version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: APP_NAME
          value: {{ .Values.service.name }}
        - name: Q_READ_ADDR
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: zookeeper.url
        - name: Q_READ_GROUP
          value: {{ .Values.env.QUEUE_READ_GROUP }}
        - name: Q_READ_TOPIC
          value: {{ .Values.env.QUEUE_READ_TOPIC }}
        - name: NATIVE_CONTENT_UUID_FIELDS
          value: {{ .Values.env.NATIVE_CONTENT_UUID_FIELDS }}
        - name: CONTENT_TYPE
          value: {{ .Values.env.CONTENT_TYPE }}
        - name: NATIVE_RW_ADDRESS
          value: "http://nativerw:8080"
        - name: NATIVE_RW_COLLECTIONS_BY_ORIGINS
          value: {{ .Values.env.NATIVE_RW_COLLECTIONS_BY_ORIGINS }}
        - name: Q_WRITE_ADDR
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: kafka.url
        - name: Q_WRITE_TOPIC
          value: {{ .Values.env.QUEUE_WRITE_TOPIC }}
        - name: MQ_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: mq.stomp.endpoint
        - name: MQ_USER
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: mq.user
        - name: MQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: mq.password
        ports: 
        - containerPort: 8080 
        livenessProbe: 
          tcpSocket: 
            port: 8080 
          initialDelaySeconds: 10 
        readinessProbe: 
          httpGet: 
            path: "/__gtg" 
            port: 8080 
          initialDelaySeconds: 15
          periodSeconds: 30 
        resources: 
{{ toYaml .Values.resources | indent 12 }}

